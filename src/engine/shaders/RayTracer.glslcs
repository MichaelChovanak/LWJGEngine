#version 430 core

layout(binding = 0, rgba32f) uniform image2D framebuffer;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;


struct object {
	vec3 pos;
	vec4 col;
};

struct box {
	object obj;
	vec3 size;
};

struct sphere {
	object obj;
	float radius;
};

struct scene {
	box boxes[2];
	sphere spheres[2];
};

struct hitInfo {
	vec3 origin;
	float distance;
	vec4 col;
	bool bounce;
	vec3 reflectDir;
};

struct Sun {
	vec3 dir;
	vec4 col;
};

#define MAX_SCENE_BOUNDS 100.0
#define NUM_BOXES 2
#define SMALL_DISTANCE 0.01
#define MAX_MARCHES 1000
#define NUM_BOUNCES 2


const Sun sun = {
	vec3(-0.2, -1.0, 0.1),
	vec4(0.8, 0.7, 0.2, 1.0)
};

const box boxes[] = {
	{object(vec3(-5.0, 3.0, -5.0), vec4 (0.0, 0.0, 1.0, 1.0)), vec3(3.0, 0.5, 0.5)}, // the ground plane
  
	{object(vec3(-5, 2, -5),  vec4 (0.0, 0.0, 1.0, 1.0)), vec3(1, 2, 1)} // middle box on ground
};

const sphere spheres[] = {
	{object(vec3(-5.0, 6.0, -5.0), vec4(0.2, 0.3, 0.3, 1.0)), 2.0}, // sphere in the air
	{object(vec3(1.0, 6.0, -5.0), vec4(0.3, 0.3, 0.3, 1.0)), 3.0} // sphere in the air
};

const scene s = {
	boxes,
	spheres
};

float length(vec3 point1, vec3 point2) {
	vec3 v = point1 - point2;
	return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
}

float signedDistanceToBox(vec3 rPos, box b) {
	vec3 offset = abs(rPos - b.obj.pos) - b.size;
	
	
	float unsignedDistance = length(max(offset,vec3(0,0,0)));
	
	//float distanceInsideBox = length(min(offset, vec3(0,0,0)));
	//return unsignedDistance + distanceInsideBox;
	return unsignedDistance;

}

float signedDistanceToSphere(vec3 rPos, sphere s) {
	return length(rPos, s.obj.pos) - s.radius;
}

vec3 getNormal(vec3 rPos, sphere s) {
	return (rPos - s.obj.pos) / s.radius;
}

vec3 getReflection(vec3 normal, vec3 dir) {
	vec3 newDir = 2 * dot(normal, dir) * normal - dir;
	return newDir;
}

hitInfo getReflection(vec3 rPos, vec3 dir, box b) {
	hitInfo info;
	return info;
}

hitInfo signedDistanceToScene(vec3 rPos, vec3 dir) {
	hitInfo info;
	info.distance = MAX_SCENE_BOUNDS;
	info.distance = min(info.distance, length(rPos, vec3(rPos.x, 0, rPos.z)));
	if(info.distance < SMALL_DISTANCE) {
		info.col = vec4(0.1, 0.5, 0.1, 1.0);
		return info;
	}
	for(int i = 0; i < s.spheres.length(); i++) {		
		float distanceToSphere = signedDistanceToSphere(rPos, s.spheres[i]);
		if(distanceToSphere < info.distance) {
			info.col = s.spheres[i].obj.col;
			info.distance = distanceToSphere;
		}
		if(info.distance < SMALL_DISTANCE) {
			vec3 normal = getNormal(rPos, s.spheres[i]);
  			info.reflectDir = getReflection(normal, -dir);
			float shading = dot(normal, -sun.dir);
			if(shading > 0.0)
				info.col += sun.col * shading / 1.5;
  			info.origin = rPos + normal * SMALL_DISTANCE;
  			info.bounce = true;
  			return info;
  		}
	}
	
	for(int i = 0; i < s.boxes.length(); i++) {
		float distanceToBox = signedDistanceToBox(rPos, s.boxes[i]);
		if(distanceToBox < info.distance) {
			info.col = s.boxes[i].obj.col;
			info.distance = distanceToBox;
		}
	}
	
	return info;
}

bool checkLight(vec3 rPos, vec3 lightDir) {
	hitInfo info = signedDistanceToScene(rPos, lightDir);
	float distanceToScene = info.distance;
	int marches;
  	for(marches = 0; marches < MAX_MARCHES; marches++) {
	  	info = signedDistanceToScene(rPos, lightDir);
	  	float distanceToScene = info.distance;
  		
  		if(distanceToScene < SMALL_DISTANCE) {
  			return true;
  		}
  		rPos = rPos + (lightDir * distanceToScene);
  	}
	return false;
}

hitInfo firstMarch(vec3 rPos, vec3 dir) {
	hitInfo info = signedDistanceToScene(rPos, dir);
	float distanceToScene = info.distance;
  	float smallest = distanceToScene;
  	int marches;
  	for(marches = 0; marches < MAX_MARCHES; marches++) {
	  	info = signedDistanceToScene(rPos, dir);
	  	float distanceToScene = info.distance;
  		smallest = min(smallest, distanceToScene);
  		
  		if(distanceToScene < SMALL_DISTANCE) {
  			vec3 origin = info.origin;
  			if(checkLight(origin, -sun.dir))
  				info.col -= vec4(0.2, 0.2, 0.2, 0.0);
  			return info;
  		}
  		rPos = rPos + (dir * distanceToScene);
  	}
  	/*
  	if(distanceToScene < 0.1) {
  		return vec4(0.0, 0.0, 0.0, 1.0);
  	}
  	vec4 skyColor = {0.6, 0.6, 0.9, 1.0};
  	if(distanceToScene < 0.5) {
  	
  		return skyColor * vec4(distanceToScene, distanceToScene, distanceToScene, 1.0) * 2;
  	} */
  	
  	vec4 skyColor = {0.6, 0.6, 0.9, 1.0};
  	info.col = skyColor * 1;
  	info.bounce = false;
  	return info;
}

hitInfo march(vec3 rPos, vec3 dir) {
	hitInfo info = signedDistanceToScene(rPos, dir);
	float distanceToScene = info.distance;
  	float smallest = distanceToScene;
  	int marches;
  	for(marches = 0; marches < MAX_MARCHES; marches++) {
	  	info = signedDistanceToScene(rPos, dir);
	  	float distanceToScene = info.distance;
  		smallest = min(smallest, distanceToScene);
  		
  		if(distanceToScene < SMALL_DISTANCE) {
  			return info;
  		}
  		rPos = rPos + (dir * distanceToScene);
  	}
  	/*
  	if(distanceToScene < 0.1) {
  		return vec4(0.0, 0.0, 0.0, 1.0);
  	}
  	vec4 skyColor = {0.6, 0.6, 0.9, 1.0};
  	if(distanceToScene < 0.5) {
  	
  		return skyColor * vec4(distanceToScene, distanceToScene, distanceToScene, 1.0) * 2;
  	} */
  	
  	vec4 skyColor = {0.6, 0.6, 0.9, 1.0};
  	info.col = skyColor * 1;
  	info.bounce = false;
  	return info;
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
	ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(framebuffer);
	if (pix.x >= size.x || pix.y >= size.y) {
    	return;
  	}
  	vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  	vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);
  	hitInfo info;
  	info.origin = eye;
  	info.reflectDir = dir;
  	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
  	info = firstMarch(info.origin, info.reflectDir);
  	color += info.col;
  	for(float i = 1; i <= NUM_BOUNCES; i++) {
  		if(!info.bounce) 
  			break;
  		info = march(info.origin, info.reflectDir);
  		color += info.col / (i + 1.0);
  		
  	}
  	//color += 
  	imageStore(framebuffer, pix, color);
}
