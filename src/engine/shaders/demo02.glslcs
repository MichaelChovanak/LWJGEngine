#version 430 core

layout(binding = 0, rgba32f) uniform image2D framebuffer;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;



struct box {
	vec3 pos;
	vec3 size;
};

struct sphere {
	vec3 pos;
	float radius;
};

struct scene {
	box boxes[2];
	sphere spheres[1];
};

#define MAX_SCENE_BOUNDS 100.0
#define NUM_BOXES 2
#define SMALL_DISTANCE 0.01
#define MAX_MARCHES 100

const box boxes[] = {
	{vec3(-5.0, -5.0, -5.0), vec3(10.0, 1.0, 10.0)}, // the ground plane
  
	{vec3(-5, -2, -5), vec3(2, 2, 2)} // middle box on ground
};

const sphere spheres[] = {
	{vec3(-5.0, 5.0, -5.0), 2.0} // sphere in the air
};

const scene s = {
	boxes,
	spheres
};

float length(vec3 point1, vec3 point2) {
	vec3 v = point1 - point2;
	return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
}

float signedDistanceToBox(vec3 rPos, box b) {
	vec3 offset = abs(rPos - b.pos) - b.size;
	
	
	float unsignedDistance = length(max(offset,vec3(0,0,0)));
	
	//float distanceInsideBox = length(min(offset, vec3(0,0,0)));
	//return unsignedDistance + distanceInsideBox;
	return unsignedDistance;

}

float signedDistanceToSphere(vec3 rPos, sphere s) {
	return length(rPos, s.pos) - s.radius;
}

float signedDistanceToScene(vec3 rPos) {
	float distanceToScene = MAX_SCENE_BOUNDS;
	
	for(int i = 0; i < s.spheres.length(); i++) {
		float distanceToSphere = signedDistanceToSphere(rPos, s.spheres[i]);
		distanceToScene = min(distanceToScene, distanceToSphere);
	}
	
	for(int i = 0; i < s.boxes.length(); i++) {
		float distanceToBox = signedDistanceToBox(rPos, s.boxes[i]);
		distanceToScene = min(distanceToScene, distanceToBox);
	}
	
	return distanceToScene;
}

vec4 march(vec3 rPos, vec3 dir) {
  	float distanceToScene = signedDistanceToScene(rPos);
  	int marches;
  	for(marches = 0; marches < MAX_MARCHES; marches++) {
  	
  		distanceToScene = min(distanceToScene, signedDistanceToScene(rPos));
  		
  		if(distanceToScene < SMALL_DISTANCE) {
  			return vec4(1.0 / marches, 4.0 / marches, 2.0 / marches, 1.0);
  		}
  		rPos = rPos + (dir * distanceToScene);
  	}
  	if(distanceToScene < 0.1) {
  		return vec4(0.0, 0.0, 0.0, 1.0);
  	}
  	vec4 skyColor = {0.6, 0.6, 0.9, 1.0};
  	if(distanceToScene < 0.5) {
  	
  		return skyColor * vec4(distanceToScene, distanceToScene, distanceToScene, 1.0) * 2;
  	}
  	return skyColor;;
  	
}

layout (local_size_x = 16, local_size_y = 8) in;
void main(void) {
	ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(framebuffer);
	if (pix.x >= size.x || pix.y >= size.y) {
    	return;
  	}
  	vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
  	vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);
  	vec4 color = march(eye, dir);
  	imageStore(framebuffer, pix, color);
}
